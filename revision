from contraction import contract
from sympy import to_cnf, Not, simplify
from sympy_demo import KB, E, C
from DPLL import DPLL

def AGM_Rationality_Postulates_for_expansion(KB, expr, KB_post_expansion):
    """
    functions that asses that AGM postulates are respected for the present expansion. 
    """
    # Sucess 
    assert expr not in KB_post_expansion, f"{expr} is still part of KB after expansion"

    # Inclusion
    assert all(x in add_sentence(KB, expr) for x in KB_post_expansion), "KB after revision is not a subset of original KB after expansion"

    # Vacuity
    if expr not in KB:
        assert KB == KB_post_expansion, "KB was modified but {expr} wasn't in KB"

    # Consistency
    if consistensy(expr):
        assert consistensy(KB_post_expansion), f"{expr} is consisten but, KB after expansion is not"
    
    # Extensionality

def consistensy(Set):
    """
    Returns if a set of beliefs is consistent.
    """
    result, list = DPLL(set)
    return result

def add_sentence(KB,s):
    """
    returns union of knowlegde base KB and sentence s.
    """
    return KB.append(s)

def expand(KB, s):
    """
    Expasion of knowlegde by KB, by a sentence s .
    """
    s = to_cnf(s)
    neg_s = to_cnf(Not(s))

    if s not in KB: 
        KB = contract(KB, neg_s)
        KB = add_sentence(KB, s)

    return KB







